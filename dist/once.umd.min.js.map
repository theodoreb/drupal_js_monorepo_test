{"version":3,"file":"once.umd.min.js","sources":["../src/once.js"],"sourcesContent":["/**\n * Mark DOM elements as processed to prevent multiple initializations.\n *\n * @module @drupal/once\n *\n * @example <caption>Use as a module</caption>\n * <script type=\"module\">\n *   import once from 'https://unpkg.com/@drupal/once@latest/dist/once.esm.js';\n *   const elements = once('my-once-id', 'div');\n *   // Initialize elements.\n *   elements.forEach(el => el.innerHTML = 'processed');\n * </script>\n *\n * @example <caption>Use as a regular script</caption>\n * <script src=\"https://unpkg.com/@drupal/once@latest/dist/once.min.js\"></script>\n * <script>\n *   const elements = once('my-once-id', 'div');\n *   // Initialize elements.\n *   elements.forEach(el => el.innerHTML = 'processed');\n * </script>\n * @example <caption>Using a single element as input</caption>\n * // once methods always return an array, to simplify the use with a single\n * // element use destructuring or the shift method.\n * const [myElement] = once('my-once-id', document.body);\n * const myElement = once('my-once-id', document.body).shift();\n */\n\n/**\n * Illegal spaces in ids.\n *\n * @private\n *\n * @type {RegExp}\n */\nconst wsRE = /[\\11\\12\\14\\15\\40]+/;\n\n/**\n * Name of the HTML attribute containing an element's once ids.\n *\n * @private\n *\n * @type {string}\n */\nconst attrName = 'data-once';\n\n/**\n * Shortcut to access the html element.\n *\n * @private\n *\n * @type {HTMLElement}\n */\nconst doc = document;\n\n/**\n * Helper to access element attributes.\n *\n * @private\n *\n * @param {Element} element\n *   The Element to access the data-once attribute from.\n * @param {string} op\n *   The action to take on the element.\n * @param {string} [value]\n *   Optional value for setAttribute.\n *\n * @return {string|undefined|null|boolean}\n *   Result of the attribute method.\n */\nfunction attr(element, op, value) {\n  return element[`${op}Attribute`](attrName, value);\n}\n\n/**\n * Return the attribute selector.\n *\n * @private\n *\n * @param {string} id\n *   The id passed by a call to a once() function.\n *\n * @return {string}\n *   The full CSS attribute selector.\n *\n * @throws {TypeError|RangeError}\n */\nfunction attrSelector(id) {\n  // Verify the validity of the once id.\n  if (typeof id !== 'string') {\n    throw new TypeError('once ID must be a string');\n  }\n  if (id === '' || wsRE.test(id)) {\n    throw new RangeError('once ID must not be empty or contain spaces');\n  }\n  // The id is valid, return the full CSS selector.\n  return `[${attrName}~=\"${id}\"]`;\n}\n\n/**\n * Verifies that an item is an instance of Element.\n *\n * This function is used during filtering to ensure only DOM elements are\n * processed. once() makes use of get/setAttribute, which are methods\n * inherited from the Element object, so only of Element can be used.\n *\n * @private\n *\n * @param {*} itemToCheck\n *   The item to check.\n *\n * @return {boolean}\n *   True if the item is an instance of Element\n *\n * @throws {TypeError}\n */\nfunction checkElement(itemToCheck) {\n  if (!(itemToCheck instanceof Element)) {\n    throw new TypeError('The element must be an instance of Element');\n  }\n  return true;\n}\n\n/**\n * Process arguments, query the DOM if necessary.\n *\n * @private\n *\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   An array with the processed Id and the list of elements to process.\n */\nfunction getElements(selector, context = doc) {\n  if (!selector) {\n    throw new TypeError('Selector must not be empty');\n  }\n  // Assume selector is an array-like value.\n  let elements = selector;\n\n  // This is a selector, query the elements.\n  if (\n    typeof selector === 'string' &&\n    (context === doc || checkElement(context))\n  ) {\n    elements = context.querySelectorAll(selector);\n  }\n  // This is a single element.\n  else if (selector instanceof Element) {\n    elements = [selector];\n  }\n\n  // Make sure an array is returned and not a NodeList or an Array-like object.\n  return Array.prototype.slice.call(elements);\n}\n\n/**\n * A helper for applying DOM changes to a filtered set of elements.\n *\n * This makes it possible to filter items that are not instances of Element,\n * then modify their DOM attributes in a single array traversal.\n *\n * @private\n *\n * @param {string} selector\n *   A CSS selector to check against to each element in the array.\n * @param {Array.<Element>} elements\n *   A NodeList or array of elements passed by a call to a once() function.\n * @param {function} [apply]\n *   An optional function to apply on all matched elements.\n *\n * @return {Array.<Element>}\n *   The array of elements that match the CSS selector.\n */\nfunction filterAndModify(selector, elements, apply) {\n  return elements.filter(element => {\n    const selected = checkElement(element) && element.matches(selector);\n    if (selected && apply) {\n      apply(element);\n    }\n    return selected;\n  });\n}\n\n/**\n * Add or remove an item from a list of once values.\n *\n * This function removes duplicates while adding or removing a once id in a\n * single array traversal.\n *\n * @private\n *\n * @param {Element} element\n *   A space separated string of once ids from a data-drupal-once attribute.\n * @param {string} [add]\n *   The once id to add to the list of values.\n * @param {string} [remove]\n *   The once id to remove from the list of values.\n *\n * @return {undefined}\n *   Nothing to return this is a callback in a foreach.\n */\nfunction updateAttribute(element, { add, remove }) {\n  const result = [];\n  if (attr(element, 'has')) {\n    attr(element, 'get')\n      .trim()\n      .split(wsRE)\n      .forEach(item => {\n        if (result.indexOf(item) < 0 && item !== remove) {\n          result.push(item);\n        }\n      });\n  }\n  if (add) {\n    result.push(add);\n  }\n  const attribute = result.join(' ');\n  attr(element, attribute === '' ? 'remove' : 'set', attribute);\n}\n\n/**\n * Ensures a JavaScript callback is only executed once on a set of elements.\n *\n * Filters a NodeList or array of elements, removing those already processed\n * by a callback with a given id.\n * This method adds a `data-once` attribute on DOM elements. The value of\n * this attribute identifies if a given callback has been executed on that\n * element.\n *\n * @global\n *\n * @example <caption>Basic usage</caption>\n * const elements = once('my-once-id', '[data-myelement]');\n * @example <caption>Input parameters accepted</caption>\n * // NodeList.\n * once('my-once-id', document.querySelectorAll('[data-myelement]'));\n * // Array or Array-like of Element.\n * once('my-once-id', jQuery('[data-myelement]'));\n * // A CSS selector without a context.\n * once('my-once-id', '[data-myelement]');\n * // A CSS selector with a context.\n * once('my-once-id', '[data-myelement]', document.head);\n * // Single Element.\n * once('my-once-id', document.querySelector('#some-id'));\n * @example <caption>Using a single element</caption>\n * // Once always returns an array, event when passing a single element. Some\n * // forms that can be used to keep code readable.\n * // Destructuring:\n * const [myElement] = once('my-once-id', document.body);\n * // By changing the resulting array, es5 compatible.\n * const myElement = once('my-once-id', document.body).shift();\n *\n * @param {string} id\n *   The id of the once call.\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   An array of elements that have not yet been processed by a once call\n *   with a given id.\n */\nfunction once(id, selector, context) {\n  return filterAndModify(\n    `:not(${attrSelector(id)})`,\n    getElements(selector, context),\n    element => updateAttribute(element, { add: id }),\n  );\n}\n\n/**\n * Removes a once id from an element's data-drupal-once attribute value.\n *\n * If a once id is removed from an element's data-drupal-once attribute value,\n * the JavaScript callback associated with that id can be executed on that\n * element again.\n *\n * @method once.remove\n *\n * @example <caption>Basic usage</caption>\n * const elements = once.remove('my-once-id', '[data-myelement]');\n * @example <caption>Input parameters accepted</caption>\n * // NodeList.\n * once.remove('my-once-id', document.querySelectorAll('[data-myelement]'));\n * // Array or Array-like of Element.\n * once.remove('my-once-id', jQuery('[data-myelement]'));\n * // A CSS selector without a context.\n * once.remove('my-once-id', '[data-myelement]');\n * // A CSS selector with a context.\n * once.remove('my-once-id', '[data-myelement]', document.head);\n * // Single Element.\n * once.remove('my-once-id', document.querySelector('#some-id'));\n *\n * @param {string} id\n *   The id of a once call.\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements to remove the once id from.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that had been processed by the provided id,\n *   and are now able to be processed again.\n */\nonce.remove = (id, selector, context) => {\n  return filterAndModify(\n    attrSelector(id),\n    getElements(selector, context),\n    element => updateAttribute(element, { remove: id }),\n  );\n};\n\n/**\n * Finds elements that have been processed by a given once id.\n *\n * Behaves like {@link once} and {@link once.remove} without changing the DOM.\n * To select all DOM nodes processed by a given id, use {@link once.find}.\n *\n * @method once.filter\n *\n * @example <caption>Basic usage</caption>\n * const filteredElements = once.filter('my-once-id', '[data-myelement]');\n * @example <caption>Input parameters accepted</caption>\n * // NodeList.\n * once.filter('my-once-id', document.querySelectorAll('[data-myelement]'));\n * // Array or Array-like of Element.\n * once.filter('my-once-id', jQuery('[data-myelement]'));\n * // A CSS selector without a context.\n * once.filter('my-once-id', '[data-myelement]');\n * // A CSS selector with a context.\n * once.filter('my-once-id', '[data-myelement]', document.head);\n * // Single Element.\n * once.filter('my-once-id', document.querySelector('#some-id'));\n *\n * @param {string} id\n *   The id of the once call.\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements to remove the once id from.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that have already been processed by the\n *   provided once id.\n */\nonce.filter = (id, selector, context) =>\n  filterAndModify(attrSelector(id), getElements(selector, context));\n\n/**\n * Finds elements that have been processed by a given once id.\n *\n * Query the 'context' element for elements that already have the\n * corresponding once id value.\n *\n * @method once.find\n *\n * @example <caption>Basic usage</caption>\n * const oncedElements = once.find('my-once-id');\n * @example <caption>Input parameters accepted</caption>\n * // Call without parameters, return all elements with a `data-once` attribute.\n * once.find();\n * // Call without a context.\n * once.find('my-once-id');\n * // Call with a context.\n * once.find('my-once-id', document.head);\n *\n * @param {string} [id]\n *   The id of the once call.\n * @param {Document|Element} [context=document]\n *   Scope of the search for matching elements.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that have already been processed by the\n *   provided once id.\n */\nonce.find = (id, context) =>\n  getElements(!id ? `[${attrName}]` : attrSelector(id), context);\n\nexport default once;\n"],"names":["const","wsRE","attrName","doc","document","attr","element","op","value","attrSelector","id","TypeError","test","RangeError","checkElement","itemToCheck","Element","getElements","selector","context","let","elements","querySelectorAll","Array","prototype","slice","call","filterAndModify","apply","filter","selected","matches","updateAttribute","result","trim","split","forEach","item","indexOf","remove","push","add","attribute","join","once","find"],"mappings":";qOAkCAA,IAAMC,EAAO,qBASPC,EAAW,YASXC,EAAMC,SAiBZ,SAASC,EAAKC,EAASC,EAAIC,GACzB,OAAOF,EAAWC,eAAeL,EAAUM,GAgB7C,SAASC,EAAaC,GAEpB,GAAkB,iBAAPA,EACT,MAAM,IAAIC,UAAU,4BAEtB,GAAW,KAAPD,GAAaT,EAAKW,KAAKF,GACzB,MAAM,IAAIG,WAAW,+CAGvB,sBAAyBH,OAoB3B,SAASI,EAAaC,GACpB,KAAMA,aAAuBC,SAC3B,MAAM,IAAIL,UAAU,8CAEtB,OAAO,EAgBT,SAASM,EAAYC,EAAUC,GAC7B,kBADuChB,IAClCe,EACH,MAAM,IAAIP,UAAU,8BAGtBS,IAAIC,EAAWH,EAef,MAXsB,iBAAbA,GACNC,IAAYhB,IAAOW,EAAaK,GAK1BD,aAAoBF,UAC3BK,EAAW,CAACH,IAJZG,EAAWF,EAAQG,iBAAiBJ,GAQ/BK,MAAMC,UAAUC,MAAMC,KAAKL,GAqBpC,SAASM,EAAgBT,EAAUG,EAAUO,GAC3C,OAAOP,EAASQ,iBAAOvB,GACrBN,IAAM8B,EAAWhB,EAAaR,IAAYA,EAAQyB,QAAQb,GAI1D,OAHIY,GAAYF,GACdA,EAAMtB,GAEDwB,KAsBX,SAASE,EAAgB1B,4BACjB2B,EAAS,GACX5B,EAAKC,EAAS,QAChBD,EAAKC,EAAS,OACX4B,OACAC,MAAMlC,GACNmC,kBAAQC,GACHJ,EAAOK,QAAQD,GAAQ,GAAKA,IAASE,GACvCN,EAAOO,KAAKH,MAIhBI,GACFR,EAAOO,KAAKC,GAEdzC,IAAM0C,EAAYT,EAAOU,KAAK,KAC9BtC,EAAKC,EAAuB,KAAdoC,EAAmB,SAAW,MAAOA,GA8CrD,SAASE,EAAKlC,EAAIQ,EAAUC,GAC1B,OAAOQ,UACGlB,EAAaC,OACrBO,EAAYC,EAAUC,aACtBb,UAAW0B,EAAgB1B,EAAS,CAAEmC,IAAK/B,cAsC/CkC,EAAKL,gBAAU7B,EAAIQ,EAAUC,GAC3B,OAAOQ,EACLlB,EAAaC,GACbO,EAAYC,EAAUC,aACtBb,UAAW0B,EAAgB1B,EAAS,CAAEiC,OAAQ7B,QAqClDkC,EAAKf,gBAAUnB,EAAIQ,EAAUC,UAC3BQ,EAAgBlB,EAAaC,GAAKO,EAAYC,EAAUC,KA6B1DyB,EAAKC,cAAQnC,EAAIS,UACfF,EAAaP,EAAuBD,EAAaC,iBAAKS"}